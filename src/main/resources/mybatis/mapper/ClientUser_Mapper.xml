<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.temobi.complex.entity.ClientUser">
	<cache type="org.mybatis.caches.ehcache.EhcacheCache" />
	<resultMap id="sql_resuleMap" type="ClientUser">
			<id property="id" column="client_user_id" />
			<result property="clientId" column="client_id" />
			<result property="username" column="client_username" />
			<result property="channel" column="client_channel" />
			<result property="version" column="client_version" />
			<result property="area" column="client_area" />
			<result property="city" column="client_city" />
			<result property="type" column="client_type" />
			<result property="createdWhen" column="created_when" />
	</resultMap>

	<sql id="sql_selectAll">
		select client_user_id,client_id,client_username,client_channel,client_version,client_area,
		client_city,client_type,created_when from emoji_client_user
	</sql>

	<sql id="sql_where">
		<where>
		 <if test="@cn.temobi.core.util.StringUtil@isNumber(id)">and client_user_id = #{id}</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNumber(clientId)">and client_id = #{clientId}</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(username)">and client_username = #{username}</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(channel)">and client_channel = #{channel}</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(version)">and client_version = #{version}</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(area)">and client_area = #{area}</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(city)">and client_city = #{city}</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(type)">and client_type = #{type}</if>
        </where>
	</sql>
	
	<select id="findAll" resultMap="sql_resuleMap" useCache="false">
	<include refid="sql_selectAll"/>
	<include refid="sql_where"/>
	ORDER BY created_when desc
	</select>
	
	<select id="getById" parameterType="Long" resultMap="sql_resuleMap" useCache="false">
	<include refid="sql_selectAll"/>
	 where client_user_id=#{id}
	</select>
	
	<select id="getByUsername" parameterType="String" resultMap="sql_resuleMap" useCache="false">
	<include refid="sql_selectAll"/>
	 where client_username=#{username}
	</select>
	
	<select id="findByMap" parameterType="map" resultMap="sql_resuleMap" useCache="false">
	<include refid="sql_selectAll"/>
	<include refid="sql_where"/>
	</select>
	
	<select id="findByPage" parameterType="ClientUser" resultMap="sql_resuleMap" useCache="false">
	<include refid="sql_selectAll"/>
	<include refid="sql_where"/>
	ORDER BY created_when desc limit #{limit} offset #{offset}
	</select>
	
	<select id="count" resultType="long" useCache="false">
		SELECT count(*) FROM emoji_client_user 
		<include refid="sql_where"/>
    </select>
	
	<insert id="insert" parameterType="ClientUser" useGeneratedKeys="true" keyProperty="id">
	insert into emoji_client_user(client_username,client_id,client_channel,client_version,client_area,client_city,client_type,created_when) 
	values(#{username},#{clientId},#{channel},#{version},#{area},#{city},#{type},now())
	</insert>
	
	<update id="update" parameterType="ClientUser">
	  UPDATE emoji_client_user
        <set>
		 <if test="@cn.temobi.core.util.StringUtil@isNumber(clientId)"> client_id = #{clientId},</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(username)"> client_username = #{username},</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(channel)"> client_channel = #{channel},</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(version)"> client_version = #{version},</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(area)"> client_area = #{area},</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(city)"> client_city = #{city},</if>
		 <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(type)"> client_type = #{type},</if>
		 </set>
        <where>
            <if test="@cn.temobi.core.util.StringUtil@isNotEmpty(id)">
                client_user_id=#{id}
            </if>
        </where>
	</update>
	
	<delete id="delete" parameterType="Long" flushCache="true">
		delete from emoji_client_user where client_user_id = #{id}
	</delete>
	
	<!-- 批量删除 -->
	<delete id="deleteByIds" parameterType="list" flushCache="true">
		DELETE FROM emoji_client_user
		<where>
				id in
				<foreach collection="list" index="index" item="item" open="(" separator="," close=")">
					#{item}
        		</foreach>
		</where>
	</delete>
	
</mapper>
